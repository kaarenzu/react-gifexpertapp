{"version":3,"sources":["reportWebVitals.js","components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setSate","useEffect","useFetchGifs","image","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBC+BCQ,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAkBvC,OAEQ,sBAAMC,SAZG,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAQV,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SApBM,SAAAP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCRVG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEZC,EAFY,iDAEoCC,UAAUH,GAF9C,+DAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAcXM,GAdW,4CAAH,sDCaRO,EAZK,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,8BAAKA,EAAL,WCwBGO,EA3BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCN,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAC9BqB,KAAO,GACPa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WAENxB,EAAQC,GACPtB,MAAM,SAAAgC,GAAG,OAAIY,EAAQ,CAClBf,KAAOG,EACPU,SAAU,SAGf,CAACpB,IAIGqB,EDjBwBG,CAAaxB,GAA/ByB,EAHiB,EAGtBlB,KAAYa,EAHU,EAGVA,QAGpB,OACI,qCACI,mCAAMpB,EAAN,OACEoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEQS,EAAMhB,KAAI,SAACC,GAAD,OACN,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEQtBe,EAvBM,WAAO,IAAD,EAEaxC,mBAAS,CAAC,cAFvB,mBAEhByC,EAFgB,KAEJ1C,EAFI,KAKvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGI0C,EAAWlB,KAAI,SAACT,EAAU4B,GAAX,OACZ,cAAC,EAAD,CAEC5B,SAAWA,GADHA,UCZ5B6B,IAASC,OACP,cAAC,EAAD,IAAgBC,SAASC,eAAe,SAM1CzD,M","file":"static/js/main.43213aa4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n\nconst [inputValue, setInputValue] = useState('')\n\nconst handleInputChange = e => {\n    \n   setInputValue(e.target.value);\n}\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    if( inputValue.trim().length > 2) {\n        setCategories( cats => [inputValue, ...cats ])\n        setInputValue('')\n    }\n\n   \n}\n\n    return (\n       \n            <form onSubmit= { handleSubmit }>\n                <input \n                    type=\"text\" \n                    value = {inputValue}\n                    onChange ={ handleInputChange}\n                />\n            </form>\n       \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\n   export const getGifs = async ( category ) => {\n\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=zP0zMbXKSqGvXYa363UYhOGOEl31plSJ`\n        const resp = await fetch(url)\n        const { data } = await resp.json()\n\n        const gifs = data.map(img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n        // Recordar que como esta función es async no regresa los gifs, regresa una promesa que resuelve la colección de nuestras imagenes\n        return gifs;\n        \n\n    }\n","import React from 'react'\n\nconst GifGridItem = ( { id, title, url} ) => {\n    \n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title } </p>\n            \n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from \"react\"\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\nimport GifGridItem from \"./GifGridItem\";\n\n\nconst GifGrid = ({ category }) => {\n\n// Envío la categoria como parametro al hook para la petición.\n    const { data:image, loading }= useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3> {category} </h3>\n            { loading && <p>loading</p>}\n            <div className=\"card-grid\">\n                {\n                    image.map((img) => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n\n                        />\n                    ))\n                }\n            </div>\n        </>\n\n\n    )\n}\n\nexport default GifGrid\n","// Los Hooks no son más que funciones, No retorna jsx, pueden tener estado. puede indicar a otros componentes cuando renderizarse según su estado ya que algo cambio.\n\nimport { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setSate] = useState({\n        data : [],\n        loading: true\n    })\n\n    useEffect(() => {\n        \n        getGifs(category)\n        .then( img => setSate({\n            data : img,\n            loading : false\n        }))\n\n    }, [category])\n\n\n\n    return state // { data : [], loading : true }\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n           \n            {\n                categories.map((category, i) => (\n                   <GifGrid \n                    key = { category }\n                    category={ category } />\n                ))\n            }\n           \n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp/>,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}